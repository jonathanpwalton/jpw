#!/usr/bin/env python

import sys, time

from sys import argv, exit
from os import uname, chdir
from os.path import basename
from urllib.request import urlopen
from urllib.error import HTTPError

def update_available():
  pass

def update_installed():
  pass

def dispatch():
  def invalid():
    raise ArgumentError(f'command or combination {repr(argv[1:])} is invalid, see {repr(f'{basename(argv[0])} help')} for more information')
  
  def count(c: int):
    if len(argv) != c:
      invalid()

  if len(argv) == 1:
    raise ArgumentError(f'at least one command must be supplied, see {repr(f'{basename(argv[0])} help')} for more information')
  
  match argv[1]:
    case 'help':
      count(2)
      print('\n'.join([
        'jpw',
        '',
        'usage:',
        '  jpw <command>',
        '',
        'commands:',
        '  update [available | installed]                         update available, installed, or all packages',
        '  install {<package> [-v <version>] [-c <config>] ...}   fetch and install one or more packages',
        '  remove {<package> ...}                                 uninstall and remove one or more packages',
        '  list {available | installed}                           list all available or installed packages',
        '  help                                                   display this help text and exit',
      ]))
    case 'update':
      if len(argv) == 2:
        update_available()
        update_installed()
      else:
        count(3)
        match argv[2]:
          case 'available': update_available()
          case 'installed': update_installed()
          case _: invalid()
    case _:
      invalid()

class ArgumentError(Exception):
  def __init__(self, *args):
    super().__init__(*args)

def download(url: str):
  file = basename(url)

  print(file.center(80))

  with urlopen(url) as response:
    headers: dict[str, str] = dict(response.getheaders())

    with open(file, 'wb') as output:
      while output.write(response.read(4096)) != 0:
        bytes = output.tell()

        try:
          total = int(headers['Content-Length'])
          length = int(bytes / total * 78)

          print(f'[{'=' * length}{' ' * (78 - length)}]', end='\r')
        except KeyError:
          left = int(time.time()) % 79
          bar = '=' * int(6 if left <= 72 else max(78 - left, 0))
          right = int(max(78 - left - len(bar), 0))
          print(f'[{' ' * left}{bar}{' ' * right}]', end='\r')
      print()

if __name__ == "__main__":
  sys.tracebacklimit = 0
  assert uname().sysname == 'Linux'
  dispatch()
