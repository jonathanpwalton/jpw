#!/usr/bin/env bash

declare -r VERSION="20250406"

set -Eeuo pipefail

if ! [[ $(command -v "$0") =~ .*/usr/local/bin/jpw ]]; then
  echo "error: jpw must be installed to */usr/local/bin/jpw"
  exit 1
fi

declare root
root="$(realpath "$(dirname "$0")/../../..")"
readonly root

declare -r pfx="$root/usr/local"
declare -r lib="$root/var/lib/jpw"
declare -r tmp="$lib/tmp"
declare -r dba="$lib/dba"
declare -r dbi="$lib/dbi"

declare -rA commands=(
  -h        jpw::help
  --help    jpw::help
  --version jpw::version
  help      jpw::help
  pull      jpw::pull
  list      jpw::list
  drop      jpw::drop
)

declare -rA rootcmds=(
  pull      true
  drop      true
)

function main {
  if [[ $# = 0 ]]; then
    error "a command must be supplied, try 'jpw help' for more information"
  elif [[ -z ${commands[$1]} ]]; then
    error "invalid command '$1'"
  elif [[ -n ${rootcmds[$1]:-} ]] && [[ ! -w "$root" ]]; then
    error "you are not permitted to perform this action"
  fi

  ${commands[$1]} "${@:2}"
  exit 0
}

function jpw::pull {
  if [[ $# != 0 ]]; then
    jpw::pullpkgs "$@"
    exit 0
  fi

  stage "synchronizing package database"
  (
    rm -rf "$tmp/jpw" "$dba"
    mkdir -p "$tmp/jpw"
    cd "$tmp/jpw"
    wget --timestamping --quiet --show-progress -O "core" "https://github.com/jonathanpwalton/packages/archive/refs/heads/main.tar.gz"
    tar -xf core
    mv "$(tar -tf core | head -1)" "$dba"
  )
}

function jpw::pullpkgs {
  if [[ $# = 0 ]]; then
    error "the 'pull' command must be followed by one or more package names"
  fi

  local -A pkgset=()
  local -a staging=()
  local pkg pro ver

  while (($#)); do
    stage "resolving package '$1'"

    if ! posix "$1" || [[ ! -d "$dba/$1" ]]; then
      error "no such package '$1'"
    elif [[ ${pkgset["$1"]+defined} = defined ]]; then
      error "package '$1' was given multiple times"
    else
      pkg="$1"; shift
    fi

    substage "resolving provider"
    pro="$(dir -w 1 "$dba/$pkg" | head -1)"
    if [[ ${1-} = -p ]] && shift; then
      if [[ -z $1 ]]; then
        error "package '$pkg' has the provider option (-p) set, but no provider is given"
      elif ! posix "$1" || [[ ! -d "$dba/$pkg/$1" ]]; then
        error "no such provider '$1' for package '$pkg'"
      else
        pro="$1"; shift
      fi
    fi

    substage "resolving version"
    ver="$(cat "$dba/$pkg/$pro/latest")"
    if [[ ${1-} = -v ]] && shift; then
      if [[ -z $1 ]]; then
        error "package '$pkg' has the version option (-v) set, but no version is given"
      elif ! posix "$1" || [[ ! -d "$dba/$pkg/$pro/$1" ]]; then
        error "no such version '$1' for package '$pkg' from provider '$pro'"
      else
        ver="$1"; shift
      fi
    fi

    pkgset["$pkg"]=true
    staging+=("$pkg" "$pro" "$ver")
  done

  local dst bld

  for (( i = 0; i < ${#staging[*]}; i += 3 )); do
    pkg="${staging[(($i + 0))]}"
    pro="${staging[(($i + 1))]}"
    ver="${staging[(($i + 2))]}"

    src="$(cat "$dba/$pkg/$pro/$ver/src")"
    dst="$(cat "$dba/$pkg/$pro/$ver/dst")"
    bld="$(cat "$dba/$pkg/$pro/$ver/bld")"

    stage "installing $pkg ($pro) version $ver"
    mkdir -p "$tmp/$pkg/$pro"

    substage "fetching source" 
    wget --timestamping --quiet --show-progress --directory-prefix "$tmp/$pkg/$pro" "$src"

    rm -rf "$dbi/$pkg"
    mkdir -p "$dbi/$pkg/$ver"

    case "$bld" in
      gnu)
        substage "building source"
        set +e
        (
          set -e
          cd "$dbi/$pkg/$ver"
          tar -xf "$tmp/$pkg/$pro/$(basename "$src")"
          cd "$dbi/$pkg/$ver/$dst"
          chown -R daemon "$dbi/$pkg/$ver/$dst"
          su daemon -s /bin/bash -c "./configure --prefix=\"$pfx\"; make"
          chown -R "$(id -nu "$EUID"):$(id -ng "$EUID")" "$dbi/$pkg/$ver/$dst"
          make install
        ) 2>&1 | sed 's/^/     /'

        if [[ $? != 0 ]]; then
          rm -rf "$dbi/$pkg"
          error "failed to install package '$pkg'"
        fi

        set -e
        substage "configuring drop"
        {
          echo "set -Eeuo pipefail"
          echo "cd \"$dbi/$pkg/$ver/$dst\""
          echo "make uninstall"
        } > "$dbi/$pkg/.drop"
      ;;
      *)
        error "building $bld is unimplemented"
      ;;
    esac
  done
}

function jpw::drop {
  if [[ $# = 0 ]]; then
    error "the 'drop' command must be followed by one or more package names"
  fi

  local -A argset=()
  local -A pkgset=()

  while (($#)); do
    if [[ ! -d "$dbi/$1" || ! -f "$dbi/$1/.drop" ]]; then
      error "cannot drop '$1' as it was not pulled"
    elif [[ ${argset["$1"]+specified} = specified ]]; then
      error "package '$1' was specified for dropping multiple times"
    fi

    pkgset["$1"]=true
    argset["$1"]=true
    shift
  done

  local package
  for package in "${!pkgset[@]}"; do
    stage "dropping $package"
    if ! /usr/bin/env bash "$dbi/$package/.drop" | sed 's/^/   /'; then
      error "failed to drop '$package'"
    fi
    rm -rf "$dbi/$package"
  done
}

function jpw::list {
  if [[ $# != 1 ]] || [[ $1 != available && $1 != installed ]]; then
    error "the 'list' command takes exactly one argument of {available | installed}"
  elif [[ $1 = available && -d "$dba" ]]; then
    dir -w1 "$dba"
  elif [[ $1 = installed && -d "$dbi" ]]; then
    dir -w1 "$dbi"
  fi
}

function jpw::help {
  if [[ $# != 0 ]]; then
    error "the 'help' command does not take any arguments"
  fi

  echo "\
usage: jpw <command>

commands:
  pull [<package> [-p <provider>] [-v <version>] ...]   if no packages are provided, synchronize the
                                                        package database and upgrade any upgradeable
                                                        packages. if packages are provided, install or
                                                        upgrade those provided
  drop {<package> ...}                                  uninstall and remove one or more packages
  list {available | installed}                          list all available or installed packages
  help                                                  display this help text and exit"
}

function jpw::version {
  echo "\
jpw (jonathan's package wrangler) $VERSION

Copyright (c) 2025 Jonathan Walton
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law."
}

function error {
  echo -e "\e[1;91merror:\e[0m $1"
  exit 1
}

function stage {
  echo -e "\e[1;97m:: $1...\e[0m"
}

function substage {
  echo -e "  \e[1;97m=> $1...\e[0m" 
}

function posix {
  [[ $1 =~ [a-zA-Z0-9\._]+[a-zA-Z0-9\._-]* ]]
}

main "$@"

